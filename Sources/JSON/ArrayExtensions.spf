extension Array where Element == JSON 
{
    /// Executes the given closure on the array element at the given index for further decoding.
    /// Records the index of the element being decoded if the closure throws an error, and 
    /// propogates it up the call chain.
    /// 
    /// -   Parameters:
    ///     -   index: An index into this array. This index must be within the array’s bounds.
    /// 
    /// -   Returns: The result of the closure, if it succeeds.
    /// 
    /// >   Throws:
    ///     A ``JSON//RecursiveError.array(underlying:at:)`` 
    ///     if an error was thrown from within the given closure.
    @inlinable public  
    func load<T>(_ index:Int, _ body:(JSON) throws -> T) throws -> T
    {
        do 
        {
            return try body(self[index])
        }
        catch let error 
        {
            throw JSON.RecursiveError.array(underlying: error, at: index)
        }
    }

    /// Attempts to unwrap the array element at the specified index as a variant array, and passes 
    /// the it to the given closure for further decoding. Records the index of the element being 
    /// decoded if the closure throws an error, and propogates it up the call chain.
    /// 
    /// -   Parameters:
    ///     -   index: An index into this array. This index must be within the array’s bounds.
    /// 
    /// -   Returns: The result of the closure, if it succeeds.
    /// 
    /// Calling this method is equivalent to the following:
    /* 
    ```swift 
    try self.load(index)
    {
        try body(try $0.as([JSON].self))
    }
    ```
    */
    /// 
    /// >   Throws:
    ///     A ``JSON//RecursiveError.array(underlying:at:)`` if an error 
    ///     was thrown from within the given closure.
    @inlinable public  
    func load<T>(_ index:Int, as _:[JSON].Type = [JSON].self, _ body:([JSON]) throws -> T) throws -> T
    {
        try self.load(index) { try body(try $0.as([JSON].self)) }
    }
    /// Attempts to unwrap the array element at the specified index as either a variant array or an 
    /// explicit ``JSON/.null`` value, and passes the array to the given closure for further decoding 
    /// if it is not ``JSON/.null``. Records the index of the element being decoded if the closure 
    /// throws an error, and propogates it up the call chain.
    /// 
    /// -   Parameters:
    ///     -   index: An index into this array. This index must be within the array’s bounds.
    /// 
    /// -   Returns: The result of the closure, if it succeeds, or [`nil`]() if the array element 
    ///     is an explicit ``JSON/.null``.
    /// 
    /// Calling this method is equivalent to the following:
    /* 
    ```swift 
    try self.load(index)
    {
        try $0.as([JSON]?.self).map(body)
    }
    ```
    */
    /// 
    /// >   Throws:
    ///     A ``JSON//RecursiveError.array(underlying:at:)`` if an error 
    ///     was thrown from within the given closure.
    @inlinable public  
    func load<T>(_ index:Int, as _:[JSON]?.Type = [JSON]?.self, _ body:([JSON]) throws -> T) throws -> T?
    {
        try self.load(index) { try $0.as([JSON]?.self).map(body) }
    }

    // null
    @inlinable public 
    func load(_ index:Int, as _:Void.Type) throws 
    {
        try self.load(index) { try $0.as(Void.self) }
    }
}

@matrix(__Primitive__: [Bool, String])
extension Array where Element == JSON 
{
    @inlinable public 
    func load<T>(_ index:Int, as _:__Primitive__.Type, 
        _ body:(__Primitive__) throws -> T) throws -> T
    {
        try self.load(index) { try body(try $0.as(__Primitive__.self)) }
    }
    @inlinable public 
    func load<T>(_ index:Int, as _:__Primitive__?.Type, 
        _ body:(__Primitive__) throws -> T) throws -> T?
    {
        try self.load(index) { try $0.as(__Primitive__?.self).map(body) } ?? nil
    }
}

@matrix(__Primitive__: [Bool, String, [JSON]])
extension Array where Element == JSON 
{
    @inlinable public 
    func load(_ index:Int, as _:__Primitive__.Type = __Primitive__.self) 
        throws -> __Primitive__
    {
        try self.load(index) { try $0.as(__Primitive__.self) }
    }
    @inlinable public 
    func load(_ index:Int, as _:__Primitive__?.Type = __Primitive__?.self) 
        throws -> __Primitive__?
    {
        try self.load(index) { try $0.as(__Primitive__?.self) }
    }
}

@matrix(
    __Generic__: 
    [
        Integer, 
        Integer, 
        Binary
    ], 
    __Conformance__: 
    [
        FixedWidthInteger & SignedInteger, 
        FixedWidthInteger & UnsignedInteger, 
        BinaryFloatingPoint, 
    ])
extension Array where Element == JSON 
{
    @inlinable public 
    func load<__Generic__, T>(_ index:Int, as _:__Generic__.Type, 
        _ body:(__Generic__) throws -> T) throws -> T
        where __Generic__:__Conformance__
    {
        try self.load(index) { try body(try $0.as(__Generic__.self)) }
    }
    @inlinable public 
    func load<__Generic__, T>(_ index:Int, as _:__Generic__?.Type, 
        _ body:(__Generic__) throws -> T) throws -> T?
        where __Generic__:__Conformance__
    {
        try self.load(index) { try $0.as(__Generic__?.self).map(body) }
    }

    @inlinable public 
    func load<__Generic__>(_ index:Int, as _:__Generic__.Type = __Generic__.self) 
        throws -> __Generic__
        where __Generic__:__Conformance__
    {
        try self.load(index) { try $0.as(__Generic__.self) }
    }
    @inlinable public 
    func load<__Generic__>(_ index:Int, as _:__Generic__?.Type = __Generic__?.self) 
        throws -> __Generic__?
        where __Generic__:__Conformance__
    {
        try self.load(index) { try $0.as(__Generic__?.self) }
    }
}